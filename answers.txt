1a) SELECT C.cname
	  FROM Customer C, Order O, Product P
		WHERE (C.discount IS NULL) AND (C.cid = O.cid) AND (O.pid = P.pid) AND (P.price > 50)

1b) SELECT A.aid
		FROM Agents A
		EXCEPT
		SELECT O.aid
		FROM Orders O

1c) SELECT O.pid
		FROM Order O
		WHERE 2 = (SELECT COUNT(*)
							 FROM Customer C1, Customer C2, Order O1, Order O2
							 WHERE (
							 (C1.cid != C2.cid) 
							 AND (O.discount < 10 AND O.cid = C1.cid) AND (O.discount > 20 AND O.cid = C2.cid)


1d) SELECT P.pid
		FROM Product P
		WHERE (P.price * P.quantity) = (SELECT DISTINCT MAX(P1.price * P1.quantity)
																		FROM Product P1)

1e) SELECT O.cid
		FROM Customers C1, Products P1, Order O
		WHERE (O.cid = C1.cid AND O.pid = P1.pid AND C1. city = P1.city)
		EXCEPT
		SELECT O.cid
		FROM Customers C1, Products P1, Order O
		WHERE O.cid = C1.cid AND O.pid = P1.pid AND NOT (C1.city = P1.city))

1f) SELECT C.cname, A.aname, P.pname
		FROM Customers C, Agents A, Products P, Orders O
		WHERE O.cid = C.cid AND O.aid  = A.aid AND O.pid = P.pid AND C.city <> A.city AND C.city <> P.city AND C.city <> A.city

1g) SELECT C.cid
		FROM Customer C, Agents A, Orders O
		WHERE O.cid = C.cid AND O.aid = (SELECT A.aid 
																		 FROM Agents A
																		 WHERE A.percent < 0.06)

1h) SELECT P.pid, SUM(O.qty) AS sum
		FROM Product P, Orders O
		WHERE O.pid = P.pid
		GROUP BY O.pid

1i) SELECT O.pid
		FROM Orders O
		GROUP BY O.pid
		HAVING SUM(O.dollars) >= ALL (SELECT SUM(O1.dollars)
														  FROM Orders O1
															GROUP BY O1.pid
														 )
1j) SELECT O.cid 
		FROM Orders O
		GROUP BY O.cid
		HAVING AVG(O.dollars) <= ALL (SELECT AVG(O1.dollars)
																  FROM Orders O1
																	GROUP BY O1.cid
																 )
		
2.2) SELECT S.sname 
		 FROM Suppliers S
		 WHERE COUNT(SELECT C.sid
		 						 FROM Catalog C
								 WHERE S.sid = C.sid) = COUNT(SELECT *
								 															FROM Parts)

2.5) SELECT *
		 FROM Suppliers S, Catalog C
		 WHERE S.sid = C.sid AND C.cost > AVG(SELECT C1.cost
		 																			FROM Catalog C1
																					WHERE C.pid = C1.pid)

2.9) SELECT C.sid
		 FROM Catalog C, Parts P
		 WHERE C.pid = P.pid AND (P.color='green' OR P.color='red')


2.11) SELECT P.pname, C.cost
			FROM Parts P, Catalog C, Suppliers S
			WHERE S.sid=C.sid AND S.sid IN ( SELECT *
																					FROM Catalog C1, Catalog C2, Parts Pred, Parts Pgreen, Supplier S1
																					WHERE S1.sid = C1.sid
																								AND S1.sid = C2.sid
																								AND C1.pid = Pred.pid
																								AND C2.pid = Pgreen.pid
																								AND Pred.color = 'red'
																								AND Pgreen.color = 'green'
																					)

																					AND C.cost = MAX(SELECT C3.cost
																													 FROM Catalog C3
																													 WHERE S.sid = C3.sid)


3.4) SELECT A.aname, AVG(E.salary) AS eavg
		 FROM Arcraft A, Employees E, Certified C
		 WHERE A.cruisingrange > 1000 AND E.eid = C.eid AND A.aid = C.aid

3.7) SELECT F.to, F.from
		 FROM Flights F, Aircraft A, Employees E
		 WHERE F.distance >= A.cruisingrange AND E.salary = (
		 																										 SELECT E1.salary
																												 FROM Certified C, Employees E1
																												 WHERE C1.aid = A.aid AND C1.eid = E1.eid AND E1.salary > 100,000
		 																										)

3.11) SELECT E.name, E.salary
			FROM Employees E
			WHERE E.salary > AVG(E.salary) AND E.eid NOT IN (SELECT E1.eid
																											 FROM Employees E1, Certified C
																											 WHERE C.eid = E1.eid
																											)


3.14) SELECT E.name
			FROM Employees E 
			WHERE 1000 < ALL (SELECT A.cruisingrange     
												FROM Aircraft A, Certified C
												WHERE A.aid = C.aid AND C.eid = E.eid
												)
			GROUP A.name = "Boeing"

4.3) SELECT E.ename
		 FROM Employees E
		 WHERE E.salary > ALL( SELECT D.budget
		 											 FROM Dept D
		 										 )

4.8) SELECT E.ename
		 FROM Employees E
		 WHERE E.eid NOT IN (SELECT D.managerid
		 								 FROM Dept D
										 WHERE D.budget < 1,000,000)

		 						AND E.eid IN (SELECT D1.managerid
															FROM Dept D
															WHERE D.budget < 5,000,000)

5.2) CREATE TABLE Dept (
				did INTEGER,
				budget REAL,
				managerid INTEGER,
				FOREIGN KEY(managerid) REFERENCES Emp
				PRIMARY KEY(did)
				CHECK(managerid IN (SELECT E.eid FROM Emp WHERE E.age > 30))
		 )

5.4) //Get all Employees whose salary is greater than any of the budgets of their managers

		DELETE FROM Emp E, Works W WHERE E.eid = 

		SELECT E.eid
		FROM Emp E, Works W
		WHERE 

6.a) CREATE ASSERTION myAssert
		 CHECK (COUNT(SELECT * FROM Class C, Enrolled E WHERE E.cname = C.cname) < 30 AND COUNT(SELECT * FROM Class C, Enrolled E WHERE E.cname = C.cname) > 5)

		 This constraint must be checked on INSERTS, DELETES

6.c) CREATE ASSERTION teachTwoCourse
		 CHECK (2 >= COUNT (
										SELECT *
										FROM Faculty F, Class C
										WHERE F.fid = C.fid
		 						 )
		 			 )

		 This assertion needs to be checked on DELETES

6.e) CREATE ASSERTION enrolled101
		 CHECK (
						COUNT(SELECT * FROM Students)=COUNT(SELECT * FROM Students S, Enrolled E WHERE S.snum = E.snum AND E.cname='Math101')
		 			 )

6.j) CREATE OR REPLACE rowName AFTER INSERT, UPDATES ON Enrolled
		 REFERENCING newTable AS insertedTuples
		 FOR EACH Statement
		 BEGIN
		 		IF 2 < (SELECT Max(R.total)
							  FROM (SELECT E1.snum, COUNT(*) AS total
											FROM insertedTuples
											GROUP BY E1.snum
											) AS R
								THEN raise_application_error("lol")
				END;
